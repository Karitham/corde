package main

import (
	"flag"
	"fmt"
	"os"
	"strings"

	genial "github.com/karitham/go-genial"
)

var types = map[string]opt{
	"OPTION_STRING":      {"string", "string"},
	"OPTION_INTEGER":     {"int", "int"},
	"OPTION_BOOLEAN":     {"bool", "bool"},
	"OPTION_USER":        {"Snowflake", "user"},
	"OPTION_CHANNEL":     {"Snowflake", "channel"},
	"OPTION_ROLE":        {"Snowflake", "role"},
	"OPTION_MENTIONABLE": {"Snowflake", "mentionable"},
	"OPTION_NUMBER":      {"float64", "number"},
}

type opt struct {
	Type string
	Name string
}

var ConstructorBody string = `	o := &%s{
		Name:        name,
		Description: description,
		Required:    required,
	}

	for _, choice := range choices {
		o.Choices = append(
			o.Choices,
			Choice[any]{Name: choice.Name, Value: choice.Value},
		)
	}

	return o
`

var CreateOptionBody string = `	return CreateOption{
		Name:        o.Name,
		Description: o.Description,
		Required:    o.Required,
		Choices:     o.Choices,
		Type:        %s,
	}
`

var file = flag.String("file", "../../../register-cmd.gen.go", "output file")

//go:generate go run .
func main() {
	flag.Parse()

	p := &genial.PackageB{}
	p.Name("corde").
		Imports("encoding/json").
		License(" GENERATED BY ./internal/cmd/gen-opt/ DO NOT EDIT.")

	for k, v := range types {
		typeName := strings.Title(fmt.Sprintf("%sOption", v.Name))

		typeOpt := &genial.StructB{}
		typeOpt.Name(typeName).
			Commentf("%s represents a %s option", typeName, v.Type).
			Field("Name", "string").
			Field("Description", "string").
			Field("Required", "bool").
			Field("Choices", "[]Choice[any]")

		constructorF := &genial.FuncB{}
		constructorF.Namef("New%s", typeName).
			Commentf("New%s returns a new %s", typeName, typeName).
			Parameter("name", "string").
			Parameter("description", "string").
			Parameter("required", "bool").
			Parameter("choices", fmt.Sprintf("...Choice[%s]", v.Type)).
			ReturnTypes("*"+typeName).
			Writef(ConstructorBody, typeName)

		createOptionF := &genial.FuncB{}
		createOptionF.Name("createOption").
			Comment("createOption returns the CreateOption of the type").
			Receiver("o", "*"+typeName).
			ReturnTypes("CreateOption").
			Writef(CreateOptionBody, k)

		marshalF := &genial.FuncB{}
		marshalF.Name("MarshalJSON").
			Comment("MarshalJSON returns the JSON representation of the option").
			Receiver("o", "*"+typeName).
			ReturnTypes("[]byte", "error").
			WriteString("\treturn json.Marshal(o.createOption())")

		p.Declarations(typeOpt, constructorF, createOptionF, marshalF)
	}

	os.WriteFile(*file, []byte(p.String()), 0o644)
}
